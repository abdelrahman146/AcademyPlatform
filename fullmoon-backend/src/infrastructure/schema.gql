# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Option {
  statement: String!
  isCorrect: Boolean!
  questionId: Float!
  question: Question!
}

type CartItem {
  id: ID!
  userId: Float!
  courseId: Float!
  user: User!
  course: Course!
}

type Enrollment {
  id: ID!
  passed: Boolean!
  studentId: Float!
  courseId: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  student: User!
  course: Course!
  attendances(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: AttendanceFilter = {}

    """Specify to sort results."""
    sorting: [AttendanceSort!] = []
  ): EnrollmentAttendancesConnection!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input CursorPaging {
  """Paginate before opaque cursor"""
  before: ConnectionCursor

  """Paginate after opaque cursor"""
  after: ConnectionCursor

  """Paginate first"""
  first: Int

  """Paginate last"""
  last: Int
}

"""Cursor for paging through collections"""
scalar ConnectionCursor

input AttendanceFilter {
  and: [AttendanceFilter!]
  or: [AttendanceFilter!]
  id: IDFilterComparison
  studentId: NumberFieldComparison
  lectureId: NumberFieldComparison
  enrolledId: NumberFieldComparison
  quizId: NumberFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  enrollment: AttendanceFilterEnrollmentFilter
  lecture: AttendanceFilterLectureFilter
  student: AttendanceFilterUserFilter
  answers: AttendanceFilterAnswerFilter
}

input IDFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ID
  neq: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  like: ID
  notLike: ID
  iLike: ID
  notILike: ID
  in: [ID!]
  notIn: [ID!]
}

input NumberFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Float
  neq: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float!]
  notIn: [Float!]
  between: NumberFieldComparisonBetween
  notBetween: NumberFieldComparisonBetween
}

input NumberFieldComparisonBetween {
  lower: Float!
  upper: Float!
}

input DateFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: DateTime
  neq: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  between: DateFieldComparisonBetween
  notBetween: DateFieldComparisonBetween
}

input DateFieldComparisonBetween {
  lower: DateTime!
  upper: DateTime!
}

input AttendanceFilterEnrollmentFilter {
  and: [AttendanceFilterEnrollmentFilter!]
  or: [AttendanceFilterEnrollmentFilter!]
  id: IDFilterComparison
  passed: BooleanFieldComparison
  studentId: NumberFieldComparison
  courseId: NumberFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
}

input BooleanFieldComparison {
  is: Boolean
  isNot: Boolean
}

input AttendanceFilterLectureFilter {
  and: [AttendanceFilterLectureFilter!]
  or: [AttendanceFilterLectureFilter!]
  id: IDFilterComparison
  type: LectureTypeFilterComparison
  title: StringFieldComparison
  startingDate: DateFieldComparison
  endingDate: DateFieldComparison
  isLocked: BooleanFieldComparison
  sectionId: NumberFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
}

input LectureTypeFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: LectureType
  neq: LectureType
  gt: LectureType
  gte: LectureType
  lt: LectureType
  lte: LectureType
  like: LectureType
  notLike: LectureType
  iLike: LectureType
  notILike: LectureType
  in: [LectureType!]
  notIn: [LectureType!]
}

enum LectureType {
  VIDEO
  STREAM
  CONFERENCE
  ARTICLE
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}

input AttendanceFilterUserFilter {
  and: [AttendanceFilterUserFilter!]
  or: [AttendanceFilterUserFilter!]
  id: IDFilterComparison
  role: UserRoleFilterComparison
  firstName: StringFieldComparison
  lastname: StringFieldComparison
  title: StringFieldComparison
  dob: DateFieldComparison
  gender: UserGenderFilterComparison
  email: StringFieldComparison
  country: StringFieldComparison
  mobile: StringFieldComparison
  isActive: BooleanFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
}

input UserRoleFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: UserRole
  neq: UserRole
  gt: UserRole
  gte: UserRole
  lt: UserRole
  lte: UserRole
  like: UserRole
  notLike: UserRole
  iLike: UserRole
  notILike: UserRole
  in: [UserRole!]
  notIn: [UserRole!]
}

enum UserRole {
  admin
  teacher
  student
}

input UserGenderFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: UserGender
  neq: UserGender
  gt: UserGender
  gte: UserGender
  lt: UserGender
  lte: UserGender
  like: UserGender
  notLike: UserGender
  iLike: UserGender
  notILike: UserGender
  in: [UserGender!]
  notIn: [UserGender!]
}

enum UserGender {
  male
  female
}

input AttendanceFilterAnswerFilter {
  and: [AttendanceFilterAnswerFilter!]
  or: [AttendanceFilterAnswerFilter!]
  id: IDFilterComparison
  studentId: NumberFieldComparison
  choosedOptionEntityId: NumberFieldComparison
  attendanceId: NumberFieldComparison
}

input AttendanceSort {
  field: AttendanceSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum AttendanceSortFields {
  id
  studentId
  lectureId
  enrolledId
  quizId
  createdAt
  updatedAt
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

type WishlistItem {
  id: ID!
  userId: Float!
  courseId: Float!
  user: User!
  course: Course!
}

type User {
  id: ID!
  role: UserRole!
  firstName: String!
  lastname: String!
  title: String!
  dob: DateTime!
  gender: UserGender!
  email: String!
  country: String!
  avatar: String!
  mobile: String!
  bio: String!
  isActive: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  cartItems(
    """Specify to filter the records returned."""
    filter: CartItemFilter = {}

    """Specify to sort results."""
    sorting: [CartItemSort!] = []
  ): [CartItem!]!
  wishlistItems(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: WishlistItemFilter = {}

    """Specify to sort results."""
    sorting: [WishlistItemSort!] = []
  ): UserWishlistItemsConnection!
  enrolledCourses(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: EnrollmentFilter = {}

    """Specify to sort results."""
    sorting: [EnrollmentSort!] = []
  ): UserEnrolledCoursesConnection!
}

input CartItemFilter {
  and: [CartItemFilter!]
  or: [CartItemFilter!]
  id: IDFilterComparison
  userId: NumberFieldComparison
  courseId: NumberFieldComparison
}

input CartItemSort {
  field: CartItemSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum CartItemSortFields {
  id
  userId
  courseId
}

input WishlistItemFilter {
  and: [WishlistItemFilter!]
  or: [WishlistItemFilter!]
  id: IDFilterComparison
  userId: NumberFieldComparison
  courseId: NumberFieldComparison
}

input WishlistItemSort {
  field: WishlistItemSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum WishlistItemSortFields {
  id
  userId
  courseId
}

input EnrollmentFilter {
  and: [EnrollmentFilter!]
  or: [EnrollmentFilter!]
  id: IDFilterComparison
  passed: BooleanFieldComparison
  studentId: NumberFieldComparison
  courseId: NumberFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  attendances: EnrollmentFilterAttendanceFilter
}

input EnrollmentFilterAttendanceFilter {
  and: [EnrollmentFilterAttendanceFilter!]
  or: [EnrollmentFilterAttendanceFilter!]
  id: IDFilterComparison
  studentId: NumberFieldComparison
  lectureId: NumberFieldComparison
  enrolledId: NumberFieldComparison
  quizId: NumberFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
}

input EnrollmentSort {
  field: EnrollmentSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum EnrollmentSortFields {
  id
  passed
  studentId
  courseId
  createdAt
  updatedAt
}

type Category {
  id: ID!
  name: String!
  headline: String!
  image: String!
  subCategories(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: SubCategoryFilter = {}

    """Specify to sort results."""
    sorting: [SubCategorySort!] = []
  ): CategorySubCategoriesConnection!
}

input SubCategoryFilter {
  and: [SubCategoryFilter!]
  or: [SubCategoryFilter!]
  id: IDFilterComparison
  title: StringFieldComparison
  parentId: NumberFieldComparison
  parent: SubCategoryFilterCategoryFilter
  courses: SubCategoryFilterCourseFilter
}

input SubCategoryFilterCategoryFilter {
  and: [SubCategoryFilterCategoryFilter!]
  or: [SubCategoryFilterCategoryFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
}

input SubCategoryFilterCourseFilter {
  and: [SubCategoryFilterCourseFilter!]
  or: [SubCategoryFilterCourseFilter!]
  id: IDFilterComparison
  type: CourseTypeFilterComparison
  title: StringFieldComparison
  startingDate: DateFieldComparison
  endingDate: DateFieldComparison
  price: NumberFieldComparison
  teacherId: NumberFieldComparison
  subCategoryId: NumberFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
}

input CourseTypeFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: CourseType
  neq: CourseType
  gt: CourseType
  gte: CourseType
  lt: CourseType
  lte: CourseType
  like: CourseType
  notLike: CourseType
  iLike: CourseType
  notILike: CourseType
  in: [CourseType!]
  notIn: [CourseType!]
}

enum CourseType {
  recorded
  live
}

input SubCategorySort {
  field: SubCategorySortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum SubCategorySortFields {
  id
  title
  parentId
}

type SubCategory {
  id: ID!
  title: String!
  headline: String!
  parentId: Float!
  parent: Category!
  courses(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: CourseFilter = {}

    """Specify to sort results."""
    sorting: [CourseSort!] = []
  ): SubCategoryCoursesConnection!
}

input CourseFilter {
  and: [CourseFilter!]
  or: [CourseFilter!]
  id: IDFilterComparison
  type: CourseTypeFilterComparison
  title: StringFieldComparison
  startingDate: DateFieldComparison
  endingDate: DateFieldComparison
  price: NumberFieldComparison
  teacherId: NumberFieldComparison
  subCategoryId: NumberFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
}

input CourseSort {
  field: CourseSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum CourseSortFields {
  id
  type
  title
  startingDate
  endingDate
  price
  teacherId
  subCategoryId
  createdAt
  updatedAt
}

type Course {
  id: ID!
  type: CourseType!
  title: String!
  headline: String!
  description: String!
  image: String!
  introVideo: String!
  startingDate: DateTime!
  endingDate: DateTime!
  price: Float!
  teacherId: Float!
  subCategoryId: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  teacher: User!
  subCategory: SubCategory!
  sections(
    """Specify to filter the records returned."""
    filter: SectionFilter = {}

    """Specify to sort results."""
    sorting: [SectionSort!] = []
  ): [Section!]!
}

input SectionFilter {
  and: [SectionFilter!]
  or: [SectionFilter!]
  id: IDFilterComparison
  courseId: NumberFieldComparison
  quizzes: SectionFilterQuizFilter
  lectures: SectionFilterLectureFilter
}

input SectionFilterQuizFilter {
  and: [SectionFilterQuizFilter!]
  or: [SectionFilterQuizFilter!]
  title: StringFieldComparison
  startingDate: DateFieldComparison
  endingDate: DateFieldComparison
  isLocked: BooleanFieldComparison
  sectionId: NumberFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
}

input SectionFilterLectureFilter {
  and: [SectionFilterLectureFilter!]
  or: [SectionFilterLectureFilter!]
  id: IDFilterComparison
  type: LectureTypeFilterComparison
  title: StringFieldComparison
  startingDate: DateFieldComparison
  endingDate: DateFieldComparison
  isLocked: BooleanFieldComparison
  sectionId: NumberFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
}

input SectionSort {
  field: SectionSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum SectionSortFields {
  id
  courseId
}

type Section {
  id: ID!
  order: Float!
  title: String!
  headline: String!
  courseId: Float!
  course: Course!
  lectures(
    """Specify to filter the records returned."""
    filter: LectureFilter = {}

    """Specify to sort results."""
    sorting: [LectureSort!] = []
  ): [Lecture!]!
  quizzes(
    """Specify to filter the records returned."""
    filter: QuizFilter = {}

    """Specify to sort results."""
    sorting: [QuizSort!] = []
  ): [Quiz!]!
}

input LectureFilter {
  and: [LectureFilter!]
  or: [LectureFilter!]
  id: IDFilterComparison
  type: LectureTypeFilterComparison
  title: StringFieldComparison
  startingDate: DateFieldComparison
  endingDate: DateFieldComparison
  isLocked: BooleanFieldComparison
  sectionId: NumberFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  attendances: LectureFilterAttendanceFilter
}

input LectureFilterAttendanceFilter {
  and: [LectureFilterAttendanceFilter!]
  or: [LectureFilterAttendanceFilter!]
  id: IDFilterComparison
  studentId: NumberFieldComparison
  lectureId: NumberFieldComparison
  enrolledId: NumberFieldComparison
  quizId: NumberFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
}

input LectureSort {
  field: LectureSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum LectureSortFields {
  id
  type
  title
  startingDate
  endingDate
  isLocked
  sectionId
  createdAt
  updatedAt
}

input QuizFilter {
  and: [QuizFilter!]
  or: [QuizFilter!]
  title: StringFieldComparison
  startingDate: DateFieldComparison
  endingDate: DateFieldComparison
  isLocked: BooleanFieldComparison
  sectionId: NumberFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  attendances: QuizFilterAttendanceFilter
}

input QuizFilterAttendanceFilter {
  and: [QuizFilterAttendanceFilter!]
  or: [QuizFilterAttendanceFilter!]
  id: IDFilterComparison
  studentId: NumberFieldComparison
  lectureId: NumberFieldComparison
  enrolledId: NumberFieldComparison
  quizId: NumberFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
}

input QuizSort {
  field: QuizSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum QuizSortFields {
  title
  startingDate
  endingDate
  isLocked
  sectionId
  createdAt
  updatedAt
}

type Lecture {
  id: ID!
  type: LectureType!
  title: String!
  startingDate: DateTime!
  endingDate: DateTime!
  article: String!
  isLocked: Boolean!
  streamLink: String!
  videoLink: String!
  conferenceId: String!
  sectionId: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  section: Section!
  attendances(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: AttendanceFilter = {}

    """Specify to sort results."""
    sorting: [AttendanceSort!] = []
  ): LectureAttendancesConnection!
}

type Attendance {
  id: ID!
  studentId: Float!
  lectureId: Float!
  enrolledId: Float!
  quizId: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  student: User!
  lecture: Lecture!
  enrollment: Enrollment!
  answers(
    """Specify to filter the records returned."""
    filter: AnswerFilter = {}

    """Specify to sort results."""
    sorting: [AnswerSort!] = []
  ): [Answer!]!
}

input AnswerFilter {
  and: [AnswerFilter!]
  or: [AnswerFilter!]
  id: IDFilterComparison
  studentId: NumberFieldComparison
  choosedOptionEntityId: NumberFieldComparison
  attendanceId: NumberFieldComparison
}

input AnswerSort {
  field: AnswerSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum AnswerSortFields {
  id
  studentId
  choosedOptionEntityId
  attendanceId
}

type Quiz {
  title: String!
  startingDate: DateTime!
  endingDate: DateTime!
  article: String!
  isLocked: Boolean!
  minScoreToPass: Float!
  sectionId: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  section: Section!
  questions(
    """Specify to filter the records returned."""
    filter: QuestionFilter = {}

    """Specify to sort results."""
    sorting: [QuestionSort!] = []
  ): [Question!]!
  attendances(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: AttendanceFilter = {}

    """Specify to sort results."""
    sorting: [AttendanceSort!] = []
  ): QuizAttendancesConnection!
}

input QuestionFilter {
  and: [QuestionFilter!]
  or: [QuestionFilter!]
  quizId: NumberFieldComparison
}

input QuestionSort {
  field: QuestionSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum QuestionSortFields {
  quizId
}

type Question {
  statement: String!
  hint: String!
  points: Float!
  quizId: Float!
  quiz: Quiz!
  options(
    """Specify to filter the records returned."""
    filter: OptionFilter = {}

    """Specify to sort results."""
    sorting: [OptionSort!] = []
  ): [Option!]!
}

input OptionFilter {
  and: [OptionFilter!]
  or: [OptionFilter!]
  isCorrect: BooleanFieldComparison
  questionId: NumberFieldComparison
}

input OptionSort {
  field: OptionSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum OptionSortFields {
  isCorrect
  questionId
}

type Answer {
  id: ID!
  studentId: Float!
  questionId: Float!
  choosedOptionEntityId: Float!
  attendanceId: Float!
  answer: String!
  student: User!
  question: Question!
  attendance: Attendance!
}

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

type AnswerDeleteResponse {
  id: ID
  studentId: Float
  questionId: Float
  choosedOptionEntityId: Float
  attendanceId: Float
  answer: String
}

type UpdateManyResponse {
  """The number of records updated."""
  updatedCount: Int!
}

type AnswerEdge {
  """The node containing the Answer"""
  node: Answer!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type PageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean

  """The cursor of the first returned record."""
  startCursor: ConnectionCursor

  """The cursor of the last returned record."""
  endCursor: ConnectionCursor
}

type AnswerConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [AnswerEdge!]!
}

type AnswerAggregateGroupBy {
  id: ID
  studentId: Float
  choosedOptionEntityId: Float
  attendanceId: Float
}

type AnswerCountAggregate {
  id: Int
  studentId: Int
  choosedOptionEntityId: Int
  attendanceId: Int
}

type AnswerSumAggregate {
  id: Float
  studentId: Float
  choosedOptionEntityId: Float
  attendanceId: Float
}

type AnswerAvgAggregate {
  id: Float
  studentId: Float
  choosedOptionEntityId: Float
  attendanceId: Float
}

type AnswerMinAggregate {
  id: ID
  studentId: Float
  choosedOptionEntityId: Float
  attendanceId: Float
}

type AnswerMaxAggregate {
  id: ID
  studentId: Float
  choosedOptionEntityId: Float
  attendanceId: Float
}

type AttendanceDeleteResponse {
  id: ID
  studentId: Float
  lectureId: Float
  enrolledId: Float
  quizId: Float
  createdAt: DateTime
  updatedAt: DateTime
}

type AttendanceEdge {
  """The node containing the Attendance"""
  node: Attendance!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type AttendanceConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [AttendanceEdge!]!
}

type AttendanceAggregateGroupBy {
  id: ID
  studentId: Float
  lectureId: Float
  enrolledId: Float
  quizId: Float
  createdAt: DateTime
  updatedAt: DateTime
}

type AttendanceCountAggregate {
  id: Int
  studentId: Int
  lectureId: Int
  enrolledId: Int
  quizId: Int
  createdAt: Int
  updatedAt: Int
}

type AttendanceSumAggregate {
  id: Float
  studentId: Float
  lectureId: Float
  enrolledId: Float
  quizId: Float
}

type AttendanceAvgAggregate {
  id: Float
  studentId: Float
  lectureId: Float
  enrolledId: Float
  quizId: Float
}

type AttendanceMinAggregate {
  id: ID
  studentId: Float
  lectureId: Float
  enrolledId: Float
  quizId: Float
  createdAt: DateTime
  updatedAt: DateTime
}

type AttendanceMaxAggregate {
  id: ID
  studentId: Float
  lectureId: Float
  enrolledId: Float
  quizId: Float
  createdAt: DateTime
  updatedAt: DateTime
}

type CategoryDeleteResponse {
  id: ID
  name: String
  headline: String
  image: String
}

type CategoryEdge {
  """The node containing the Category"""
  node: Category!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type CategoryConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [CategoryEdge!]!
}

type CategoryAggregateGroupBy {
  id: ID
  name: String
}

type CategoryCountAggregate {
  id: Int
  name: Int
}

type CategorySumAggregate {
  id: Float
}

type CategoryAvgAggregate {
  id: Float
}

type CategoryMinAggregate {
  id: ID
  name: String
}

type CategoryMaxAggregate {
  id: ID
  name: String
}

type SubCategoryEdge {
  """The node containing the SubCategory"""
  node: SubCategory!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type CategorySubCategoriesConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [SubCategoryEdge!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type SubCategoryDeleteResponse {
  id: ID
  title: String
  headline: String
  parentId: Float
}

type SubCategoryConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [SubCategoryEdge!]!
}

type SubCategoryAggregateGroupBy {
  id: ID
  title: String
  parentId: Float
}

type SubCategoryCountAggregate {
  id: Int
  title: Int
  parentId: Int
}

type SubCategorySumAggregate {
  id: Float
  parentId: Float
}

type SubCategoryAvgAggregate {
  id: Float
  parentId: Float
}

type SubCategoryMinAggregate {
  id: ID
  title: String
  parentId: Float
}

type SubCategoryMaxAggregate {
  id: ID
  title: String
  parentId: Float
}

type CourseEdge {
  """The node containing the Course"""
  node: Course!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type SubCategoryCoursesConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [CourseEdge!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type CourseDeleteResponse {
  id: ID
  type: CourseType
  title: String
  headline: String
  description: String
  image: String
  introVideo: String
  startingDate: DateTime
  endingDate: DateTime
  price: Float
  teacherId: Float
  subCategoryId: Float
  createdAt: DateTime
  updatedAt: DateTime
}

type CourseConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [CourseEdge!]!
}

type CourseAggregateGroupBy {
  id: ID
  type: CourseType
  title: String
  startingDate: DateTime
  endingDate: DateTime
  price: Float
  teacherId: Float
  subCategoryId: Float
  createdAt: DateTime
  updatedAt: DateTime
}

type CourseCountAggregate {
  id: Int
  type: Int
  title: Int
  startingDate: Int
  endingDate: Int
  price: Int
  teacherId: Int
  subCategoryId: Int
  createdAt: Int
  updatedAt: Int
}

type CourseSumAggregate {
  id: Float
  price: Float
  teacherId: Float
  subCategoryId: Float
}

type CourseAvgAggregate {
  id: Float
  price: Float
  teacherId: Float
  subCategoryId: Float
}

type CourseMinAggregate {
  id: ID
  type: CourseType
  title: String
  startingDate: DateTime
  endingDate: DateTime
  price: Float
  teacherId: Float
  subCategoryId: Float
  createdAt: DateTime
  updatedAt: DateTime
}

type CourseMaxAggregate {
  id: ID
  type: CourseType
  title: String
  startingDate: DateTime
  endingDate: DateTime
  price: Float
  teacherId: Float
  subCategoryId: Float
  createdAt: DateTime
  updatedAt: DateTime
}

type SectionDeleteResponse {
  id: ID
  order: Float
  title: String
  headline: String
  courseId: Float
}

type SectionEdge {
  """The node containing the Section"""
  node: Section!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type SectionConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [SectionEdge!]!
}

type SectionAggregateGroupBy {
  id: ID
  courseId: Float
}

type SectionCountAggregate {
  id: Int
  courseId: Int
}

type SectionSumAggregate {
  id: Float
  courseId: Float
}

type SectionAvgAggregate {
  id: Float
  courseId: Float
}

type SectionMinAggregate {
  id: ID
  courseId: Float
}

type SectionMaxAggregate {
  id: ID
  courseId: Float
}

type LectureDeleteResponse {
  id: ID
  type: LectureType
  title: String
  startingDate: DateTime
  endingDate: DateTime
  article: String
  isLocked: Boolean
  streamLink: String
  videoLink: String
  conferenceId: String
  sectionId: Float
  createdAt: DateTime
  updatedAt: DateTime
}

type LectureEdge {
  """The node containing the Lecture"""
  node: Lecture!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type LectureConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [LectureEdge!]!
}

type LectureAggregateGroupBy {
  id: ID
  type: LectureType
  title: String
  startingDate: DateTime
  endingDate: DateTime
  isLocked: Boolean
  sectionId: Float
  createdAt: DateTime
  updatedAt: DateTime
}

type LectureCountAggregate {
  id: Int
  type: Int
  title: Int
  startingDate: Int
  endingDate: Int
  isLocked: Int
  sectionId: Int
  createdAt: Int
  updatedAt: Int
}

type LectureSumAggregate {
  id: Float
  sectionId: Float
}

type LectureAvgAggregate {
  id: Float
  sectionId: Float
}

type LectureMinAggregate {
  id: ID
  type: LectureType
  title: String
  startingDate: DateTime
  endingDate: DateTime
  sectionId: Float
  createdAt: DateTime
  updatedAt: DateTime
}

type LectureMaxAggregate {
  id: ID
  type: LectureType
  title: String
  startingDate: DateTime
  endingDate: DateTime
  sectionId: Float
  createdAt: DateTime
  updatedAt: DateTime
}

type LectureAttendancesConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [AttendanceEdge!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type QuizDeleteResponse {
  title: String
  startingDate: DateTime
  endingDate: DateTime
  article: String
  isLocked: Boolean
  minScoreToPass: Float
  sectionId: Float
  createdAt: DateTime
  updatedAt: DateTime
}

type QuizEdge {
  """The node containing the Quiz"""
  node: Quiz!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type QuizConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [QuizEdge!]!
}

type QuizAggregateGroupBy {
  title: String
  startingDate: DateTime
  endingDate: DateTime
  isLocked: Boolean
  sectionId: Float
  createdAt: DateTime
  updatedAt: DateTime
}

type QuizCountAggregate {
  title: Int
  startingDate: Int
  endingDate: Int
  isLocked: Int
  sectionId: Int
  createdAt: Int
  updatedAt: Int
}

type QuizSumAggregate {
  sectionId: Float
}

type QuizAvgAggregate {
  sectionId: Float
}

type QuizMinAggregate {
  title: String
  startingDate: DateTime
  endingDate: DateTime
  sectionId: Float
  createdAt: DateTime
  updatedAt: DateTime
}

type QuizMaxAggregate {
  title: String
  startingDate: DateTime
  endingDate: DateTime
  sectionId: Float
  createdAt: DateTime
  updatedAt: DateTime
}

type QuizAttendancesConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [AttendanceEdge!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type QuestionDeleteResponse {
  statement: String
  hint: String
  points: Float
  quizId: Float
}

type QuestionEdge {
  """The node containing the Question"""
  node: Question!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type QuestionConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [QuestionEdge!]!
}

type QuestionAggregateGroupBy {
  quizId: Float
}

type QuestionCountAggregate {
  quizId: Int
}

type QuestionSumAggregate {
  quizId: Float
}

type QuestionAvgAggregate {
  quizId: Float
}

type QuestionMinAggregate {
  quizId: Float
}

type QuestionMaxAggregate {
  quizId: Float
}

type OptionDeleteResponse {
  statement: String
  isCorrect: Boolean
  questionId: Float
}

type OptionEdge {
  """The node containing the Option"""
  node: Option!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type OptionConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [OptionEdge!]!
}

type OptionAggregateGroupBy {
  isCorrect: Boolean
  questionId: Float
}

type OptionCountAggregate {
  isCorrect: Int
  questionId: Int
}

type OptionSumAggregate {
  questionId: Float
}

type OptionAvgAggregate {
  questionId: Float
}

type OptionMinAggregate {
  questionId: Float
}

type OptionMaxAggregate {
  questionId: Float
}

type UserDeleteResponse {
  id: ID
  role: UserRole
  firstName: String
  lastname: String
  title: String
  dob: DateTime
  gender: UserGender
  email: String
  country: String
  avatar: String
  mobile: String
  bio: String
  isActive: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

type UserEdge {
  """The node containing the User"""
  node: User!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type UserConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [UserEdge!]!
}

type UserAggregateGroupBy {
  id: ID
  role: UserRole
  firstName: String
  lastname: String
  title: String
  dob: DateTime
  gender: UserGender
  email: String
  country: String
  mobile: String
  isActive: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

type UserCountAggregate {
  id: Int
  role: Int
  firstName: Int
  lastname: Int
  title: Int
  dob: Int
  gender: Int
  email: Int
  country: Int
  mobile: Int
  isActive: Int
  createdAt: Int
  updatedAt: Int
}

type UserSumAggregate {
  id: Float
}

type UserAvgAggregate {
  id: Float
}

type UserMinAggregate {
  id: ID
  role: UserRole
  firstName: String
  lastname: String
  title: String
  dob: DateTime
  gender: UserGender
  email: String
  country: String
  mobile: String
  createdAt: DateTime
  updatedAt: DateTime
}

type UserMaxAggregate {
  id: ID
  role: UserRole
  firstName: String
  lastname: String
  title: String
  dob: DateTime
  gender: UserGender
  email: String
  country: String
  mobile: String
  createdAt: DateTime
  updatedAt: DateTime
}

type EnrollmentEdge {
  """The node containing the Enrollment"""
  node: Enrollment!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type UserEnrolledCoursesConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [EnrollmentEdge!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type WishlistItemEdge {
  """The node containing the WishlistItem"""
  node: WishlistItem!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type UserWishlistItemsConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [WishlistItemEdge!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type WishlistItemDeleteResponse {
  id: ID
  userId: Float
  courseId: Float
}

type WishlistItemConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [WishlistItemEdge!]!
}

type WishlistItemAggregateGroupBy {
  id: ID
  userId: Float
  courseId: Float
}

type WishlistItemCountAggregate {
  id: Int
  userId: Int
  courseId: Int
}

type WishlistItemSumAggregate {
  id: Float
  userId: Float
  courseId: Float
}

type WishlistItemAvgAggregate {
  id: Float
  userId: Float
  courseId: Float
}

type WishlistItemMinAggregate {
  id: ID
  userId: Float
  courseId: Float
}

type WishlistItemMaxAggregate {
  id: ID
  userId: Float
  courseId: Float
}

type CartItemDeleteResponse {
  id: ID
  userId: Float
  courseId: Float
}

type CartItemEdge {
  """The node containing the CartItem"""
  node: CartItem!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type CartItemConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [CartItemEdge!]!
}

type CartItemAggregateGroupBy {
  id: ID
  userId: Float
  courseId: Float
}

type CartItemCountAggregate {
  id: Int
  userId: Int
  courseId: Int
}

type CartItemSumAggregate {
  id: Float
  userId: Float
  courseId: Float
}

type CartItemAvgAggregate {
  id: Float
  userId: Float
  courseId: Float
}

type CartItemMinAggregate {
  id: ID
  userId: Float
  courseId: Float
}

type CartItemMaxAggregate {
  id: ID
  userId: Float
  courseId: Float
}

type EnrollmentDeleteResponse {
  id: ID
  passed: Boolean
  studentId: Float
  courseId: Float
  createdAt: DateTime
  updatedAt: DateTime
}

type EnrollmentConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [EnrollmentEdge!]!
}

type EnrollmentAggregateGroupBy {
  id: ID
  passed: Boolean
  studentId: Float
  courseId: Float
  createdAt: DateTime
  updatedAt: DateTime
}

type EnrollmentCountAggregate {
  id: Int
  passed: Int
  studentId: Int
  courseId: Int
  createdAt: Int
  updatedAt: Int
}

type EnrollmentSumAggregate {
  id: Float
  studentId: Float
  courseId: Float
}

type EnrollmentAvgAggregate {
  id: Float
  studentId: Float
  courseId: Float
}

type EnrollmentMinAggregate {
  id: ID
  studentId: Float
  courseId: Float
  createdAt: DateTime
  updatedAt: DateTime
}

type EnrollmentMaxAggregate {
  id: ID
  studentId: Float
  courseId: Float
  createdAt: DateTime
  updatedAt: DateTime
}

type EnrollmentAttendancesConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [AttendanceEdge!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type Query {
  user(
    """The id of the record to find."""
    id: ID!
  ): User
  users(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: UserFilter = {}

    """Specify to sort results."""
    sorting: [UserSort!] = []
  ): UserConnection!
  wishlistItem(
    """The id of the record to find."""
    id: ID!
  ): WishlistItem
  wishlistItems(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: WishlistItemFilter = {}

    """Specify to sort results."""
    sorting: [WishlistItemSort!] = []
  ): WishlistItemConnection!
  cartItem(
    """The id of the record to find."""
    id: ID!
  ): CartItem
  cartItems(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: CartItemFilter = {}

    """Specify to sort results."""
    sorting: [CartItemSort!] = []
  ): CartItemConnection!
  enrollment(
    """The id of the record to find."""
    id: ID!
  ): Enrollment
  enrollments(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: EnrollmentFilter = {}

    """Specify to sort results."""
    sorting: [EnrollmentSort!] = []
  ): EnrollmentConnection!
  category(
    """The id of the record to find."""
    id: ID!
  ): Category
  categories(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: CategoryFilter = {}

    """Specify to sort results."""
    sorting: [CategorySort!] = []
  ): CategoryConnection!
  subCategory(
    """The id of the record to find."""
    id: ID!
  ): SubCategory
  subCategories(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: SubCategoryFilter = {}

    """Specify to sort results."""
    sorting: [SubCategorySort!] = []
  ): SubCategoryConnection!
  course(
    """The id of the record to find."""
    id: ID!
  ): Course
  courses(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: CourseFilter = {}

    """Specify to sort results."""
    sorting: [CourseSort!] = []
  ): CourseConnection!
  section(
    """The id of the record to find."""
    id: ID!
  ): Section
  sections(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: SectionFilter = {}

    """Specify to sort results."""
    sorting: [SectionSort!] = []
  ): SectionConnection!
  quiz(
    """The id of the record to find."""
    id: ID!
  ): Quiz
  quizzes(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: QuizFilter = {}

    """Specify to sort results."""
    sorting: [QuizSort!] = []
  ): QuizConnection!
  question(
    """The id of the record to find."""
    id: ID!
  ): Question
  questions(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: QuestionFilter = {}

    """Specify to sort results."""
    sorting: [QuestionSort!] = []
  ): QuestionConnection!
  option(
    """The id of the record to find."""
    id: ID!
  ): Option
  options(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: OptionFilter = {}

    """Specify to sort results."""
    sorting: [OptionSort!] = []
  ): OptionConnection!
  lecture(
    """The id of the record to find."""
    id: ID!
  ): Lecture
  lectures(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: LectureFilter = {}

    """Specify to sort results."""
    sorting: [LectureSort!] = []
  ): LectureConnection!
  answer(
    """The id of the record to find."""
    id: ID!
  ): Answer
  answers(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: AnswerFilter = {}

    """Specify to sort results."""
    sorting: [AnswerSort!] = []
  ): AnswerConnection!
  attendance(
    """The id of the record to find."""
    id: ID!
  ): Attendance
  attendances(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: AttendanceFilter = {}

    """Specify to sort results."""
    sorting: [AttendanceSort!] = []
  ): AttendanceConnection!
}

input UserFilter {
  and: [UserFilter!]
  or: [UserFilter!]
  id: IDFilterComparison
  role: UserRoleFilterComparison
  firstName: StringFieldComparison
  lastname: StringFieldComparison
  title: StringFieldComparison
  dob: DateFieldComparison
  gender: UserGenderFilterComparison
  email: StringFieldComparison
  country: StringFieldComparison
  mobile: StringFieldComparison
  isActive: BooleanFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  enrolledCourses: UserFilterEnrollmentFilter
}

input UserFilterEnrollmentFilter {
  and: [UserFilterEnrollmentFilter!]
  or: [UserFilterEnrollmentFilter!]
  id: IDFilterComparison
  passed: BooleanFieldComparison
  studentId: NumberFieldComparison
  courseId: NumberFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
}

input UserSort {
  field: UserSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum UserSortFields {
  id
  role
  firstName
  lastname
  title
  dob
  gender
  email
  country
  mobile
  isActive
  createdAt
  updatedAt
}

input CategoryFilter {
  and: [CategoryFilter!]
  or: [CategoryFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  subCategories: CategoryFilterSubCategoryFilter
}

input CategoryFilterSubCategoryFilter {
  and: [CategoryFilterSubCategoryFilter!]
  or: [CategoryFilterSubCategoryFilter!]
  id: IDFilterComparison
  title: StringFieldComparison
  parentId: NumberFieldComparison
}

input CategorySort {
  field: CategorySortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum CategorySortFields {
  id
  name
}

type Mutation {
  addCartItemsToUser(input: AddCartItemsToUserInput!): User!
  setCartItemsOnUser(input: SetCartItemsOnUserInput!): User!
  addWishlistItemsToUser(input: AddWishlistItemsToUserInput!): User!
  setWishlistItemsOnUser(input: SetWishlistItemsOnUserInput!): User!
  addEnrolledCoursesToUser(input: AddEnrolledCoursesToUserInput!): User!
  setEnrolledCoursesOnUser(input: SetEnrolledCoursesOnUserInput!): User!
  removeCartItemsFromUser(input: RemoveCartItemsFromUserInput!): User!
  removeWishlistItemsFromUser(input: RemoveWishlistItemsFromUserInput!): User!
  createOneUser(input: CreateOneUserInput!): User!
  createManyUsers(input: CreateManyUsersInput!): [User!]!
  updateOneUser(input: UpdateOneUserInput!): User!
  updateManyUsers(input: UpdateManyUsersInput!): UpdateManyResponse!
  deleteOneUser(input: DeleteOneUserInput!): UserDeleteResponse!
  deleteManyUsers(input: DeleteManyUsersInput!): DeleteManyResponse!
  createOneWishlistItem(input: CreateOneWishlistItemInput!): WishlistItem!
  createManyWishlistItems(input: CreateManyWishlistItemsInput!): [WishlistItem!]!
  updateOneWishlistItem(input: UpdateOneWishlistItemInput!): WishlistItem!
  updateManyWishlistItems(input: UpdateManyWishlistItemsInput!): UpdateManyResponse!
  deleteOneWishlistItem(input: DeleteOneWishlistItemInput!): WishlistItemDeleteResponse!
  deleteManyWishlistItems(input: DeleteManyWishlistItemsInput!): DeleteManyResponse!
  createOneCartItem(input: CreateOneCartItemInput!): CartItem!
  createManyCartItems(input: CreateManyCartItemsInput!): [CartItem!]!
  updateOneCartItem(input: UpdateOneCartItemInput!): CartItem!
  updateManyCartItems(input: UpdateManyCartItemsInput!): UpdateManyResponse!
  deleteOneCartItem(input: DeleteOneCartItemInput!): CartItemDeleteResponse!
  deleteManyCartItems(input: DeleteManyCartItemsInput!): DeleteManyResponse!
  addAttendancesToEnrollment(input: AddAttendancesToEnrollmentInput!): Enrollment!
  setAttendancesOnEnrollment(input: SetAttendancesOnEnrollmentInput!): Enrollment!
  removeAttendancesFromEnrollment(input: RemoveAttendancesFromEnrollmentInput!): Enrollment!
  createOneEnrollment(input: CreateOneEnrollmentInput!): Enrollment!
  createManyEnrollments(input: CreateManyEnrollmentsInput!): [Enrollment!]!
  updateOneEnrollment(input: UpdateOneEnrollmentInput!): Enrollment!
  updateManyEnrollments(input: UpdateManyEnrollmentsInput!): UpdateManyResponse!
  deleteOneEnrollment(input: DeleteOneEnrollmentInput!): EnrollmentDeleteResponse!
  deleteManyEnrollments(input: DeleteManyEnrollmentsInput!): DeleteManyResponse!
  addSubCategoriesToCategory(input: AddSubCategoriesToCategoryInput!): Category!
  setSubCategoriesOnCategory(input: SetSubCategoriesOnCategoryInput!): Category!
  removeSubCategoriesFromCategory(input: RemoveSubCategoriesFromCategoryInput!): Category!
  createOneCategory(input: CreateOneCategoryInput!): Category!
  createManyCategories(input: CreateManyCategoriesInput!): [Category!]!
  updateOneCategory(input: UpdateOneCategoryInput!): Category!
  updateManyCategories(input: UpdateManyCategoriesInput!): UpdateManyResponse!
  deleteOneCategory(input: DeleteOneCategoryInput!): CategoryDeleteResponse!
  deleteManyCategories(input: DeleteManyCategoriesInput!): DeleteManyResponse!
  setParentOnSubCategory(input: SetParentOnSubCategoryInput!): SubCategory!
  addCoursesToSubCategory(input: AddCoursesToSubCategoryInput!): SubCategory!
  setCoursesOnSubCategory(input: SetCoursesOnSubCategoryInput!): SubCategory!
  removeCoursesFromSubCategory(input: RemoveCoursesFromSubCategoryInput!): SubCategory!
  createOneSubCategory(input: CreateOneSubCategoryInput!): SubCategory!
  createManySubCategories(input: CreateManySubCategoriesInput!): [SubCategory!]!
  updateOneSubCategory(input: UpdateOneSubCategoryInput!): SubCategory!
  updateManySubCategories(input: UpdateManySubCategoriesInput!): UpdateManyResponse!
  deleteOneSubCategory(input: DeleteOneSubCategoryInput!): SubCategoryDeleteResponse!
  deleteManySubCategories(input: DeleteManySubCategoriesInput!): DeleteManyResponse!
  setSubCategoryOnCourse(input: SetSubCategoryOnCourseInput!): Course!
  addSectionsToCourse(input: AddSectionsToCourseInput!): Course!
  setSectionsOnCourse(input: SetSectionsOnCourseInput!): Course!
  removeSectionsFromCourse(input: RemoveSectionsFromCourseInput!): Course!
  createOneCourse(input: CreateOneCourseInput!): Course!
  createManyCourses(input: CreateManyCoursesInput!): [Course!]!
  updateOneCourse(input: UpdateOneCourseInput!): Course!
  updateManyCourses(input: UpdateManyCoursesInput!): UpdateManyResponse!
  deleteOneCourse(input: DeleteOneCourseInput!): CourseDeleteResponse!
  deleteManyCourses(input: DeleteManyCoursesInput!): DeleteManyResponse!
  addLecturesToSection(input: AddLecturesToSectionInput!): Section!
  setLecturesOnSection(input: SetLecturesOnSectionInput!): Section!
  addQuizzesToSection(input: AddQuizzesToSectionInput!): Section!
  setQuizzesOnSection(input: SetQuizzesOnSectionInput!): Section!
  removeLecturesFromSection(input: RemoveLecturesFromSectionInput!): Section!
  removeQuizzesFromSection(input: RemoveQuizzesFromSectionInput!): Section!
  createOneSection(input: CreateOneSectionInput!): Section!
  createManySections(input: CreateManySectionsInput!): [Section!]!
  updateOneSection(input: UpdateOneSectionInput!): Section!
  updateManySections(input: UpdateManySectionsInput!): UpdateManyResponse!
  deleteOneSection(input: DeleteOneSectionInput!): SectionDeleteResponse!
  deleteManySections(input: DeleteManySectionsInput!): DeleteManyResponse!
  setSectionOnQuiz(input: SetSectionOnQuizInput!): Quiz!
  addQuestionsToQuiz(input: AddQuestionsToQuizInput!): Quiz!
  setQuestionsOnQuiz(input: SetQuestionsOnQuizInput!): Quiz!
  addAttendancesToQuiz(input: AddAttendancesToQuizInput!): Quiz!
  setAttendancesOnQuiz(input: SetAttendancesOnQuizInput!): Quiz!
  removeQuestionsFromQuiz(input: RemoveQuestionsFromQuizInput!): Quiz!
  removeAttendancesFromQuiz(input: RemoveAttendancesFromQuizInput!): Quiz!
  createOneQuiz(input: CreateOneQuizInput!): Quiz!
  createManyQuizzes(input: CreateManyQuizzesInput!): [Quiz!]!
  updateOneQuiz(input: UpdateOneQuizInput!): Quiz!
  updateManyQuizzes(input: UpdateManyQuizzesInput!): UpdateManyResponse!
  deleteOneQuiz(input: DeleteOneQuizInput!): QuizDeleteResponse!
  deleteManyQuizzes(input: DeleteManyQuizzesInput!): DeleteManyResponse!
  setQuizOnQuestion(input: SetQuizOnQuestionInput!): Question!
  addOptionsToQuestion(input: AddOptionsToQuestionInput!): Question!
  setOptionsOnQuestion(input: SetOptionsOnQuestionInput!): Question!
  removeOptionsFromQuestion(input: RemoveOptionsFromQuestionInput!): Question!
  createOneQuestion(input: CreateOneQuestionInput!): Question!
  createManyQuestions(input: CreateManyQuestionsInput!): [Question!]!
  updateOneQuestion(input: UpdateOneQuestionInput!): Question!
  updateManyQuestions(input: UpdateManyQuestionsInput!): UpdateManyResponse!
  deleteOneQuestion(input: DeleteOneQuestionInput!): QuestionDeleteResponse!
  deleteManyQuestions(input: DeleteManyQuestionsInput!): DeleteManyResponse!
  setQuestionOnOption(input: SetQuestionOnOptionInput!): Option!
  createOneOption(input: CreateOneOptionInput!): Option!
  createManyOptions(input: CreateManyOptionsInput!): [Option!]!
  updateOneOption(input: UpdateOneOptionInput!): Option!
  updateManyOptions(input: UpdateManyOptionsInput!): UpdateManyResponse!
  deleteOneOption(input: DeleteOneOptionInput!): OptionDeleteResponse!
  deleteManyOptions(input: DeleteManyOptionsInput!): DeleteManyResponse!
  setSectionOnLecture(input: SetSectionOnLectureInput!): Lecture!
  addAttendancesToLecture(input: AddAttendancesToLectureInput!): Lecture!
  setAttendancesOnLecture(input: SetAttendancesOnLectureInput!): Lecture!
  removeAttendancesFromLecture(input: RemoveAttendancesFromLectureInput!): Lecture!
  createOneLecture(input: CreateOneLectureInput!): Lecture!
  createManyLectures(input: CreateManyLecturesInput!): [Lecture!]!
  updateOneLecture(input: UpdateOneLectureInput!): Lecture!
  updateManyLectures(input: UpdateManyLecturesInput!): UpdateManyResponse!
  deleteOneLecture(input: DeleteOneLectureInput!): LectureDeleteResponse!
  deleteManyLectures(input: DeleteManyLecturesInput!): DeleteManyResponse!
  createOneAnswer(input: CreateOneAnswerInput!): Answer!
  createManyAnswers(input: CreateManyAnswersInput!): [Answer!]!
  updateOneAnswer(input: UpdateOneAnswerInput!): Answer!
  updateManyAnswers(input: UpdateManyAnswersInput!): UpdateManyResponse!
  deleteOneAnswer(input: DeleteOneAnswerInput!): AnswerDeleteResponse!
  deleteManyAnswers(input: DeleteManyAnswersInput!): DeleteManyResponse!
  createOneAttendance(input: CreateOneAttendanceInput!): Attendance!
  createManyAttendances(input: CreateManyAttendancesInput!): [Attendance!]!
  updateOneAttendance(input: UpdateOneAttendanceInput!): Attendance!
  updateManyAttendances(input: UpdateManyAttendancesInput!): UpdateManyResponse!
  deleteOneAttendance(input: DeleteOneAttendanceInput!): AttendanceDeleteResponse!
  deleteManyAttendances(input: DeleteManyAttendancesInput!): DeleteManyResponse!
}

input AddCartItemsToUserInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetCartItemsOnUserInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input AddWishlistItemsToUserInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetWishlistItemsOnUserInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input AddEnrolledCoursesToUserInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetEnrolledCoursesOnUserInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveCartItemsFromUserInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveWishlistItemsFromUserInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input CreateOneUserInput {
  """The record to create"""
  user: UserCreateInput!
}

input UserCreateInput {
  firstName: String
  lastName: String
  title: String
  dob: DateTime
  gender: UserGender
  email: String!
  password: String!
  country: String
  avatar: String
  mobile: String
  bio: String
}

input CreateManyUsersInput {
  """Array of records to create"""
  users: [UserCreateInput!]!
}

input UpdateOneUserInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UserUpdateInput!
}

input UserUpdateInput {
  role: UserRole!
  firstName: String!
  lastName: String!
  title: String!
  dob: DateTime!
  gender: UserGender!
  email: String!
  password: String!
  country: String!
  avatar: String!
  mobile: String!
  bio: String!
}

input UpdateManyUsersInput {
  """Filter used to find fields to update"""
  filter: UserUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UserUpdateInput!
}

input UserUpdateFilter {
  and: [UserUpdateFilter!]
  or: [UserUpdateFilter!]
  id: IDFilterComparison
  role: UserRoleFilterComparison
  firstName: StringFieldComparison
  lastname: StringFieldComparison
  title: StringFieldComparison
  dob: DateFieldComparison
  gender: UserGenderFilterComparison
  email: StringFieldComparison
  country: StringFieldComparison
  mobile: StringFieldComparison
  isActive: BooleanFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
}

input DeleteOneUserInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyUsersInput {
  """Filter to find records to delete"""
  filter: UserDeleteFilter!
}

input UserDeleteFilter {
  and: [UserDeleteFilter!]
  or: [UserDeleteFilter!]
  id: IDFilterComparison
  role: UserRoleFilterComparison
  firstName: StringFieldComparison
  lastname: StringFieldComparison
  title: StringFieldComparison
  dob: DateFieldComparison
  gender: UserGenderFilterComparison
  email: StringFieldComparison
  country: StringFieldComparison
  mobile: StringFieldComparison
  isActive: BooleanFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
}

input CreateOneWishlistItemInput {
  """The record to create"""
  wishlistItem: CreateWishlistItem!
}

input CreateWishlistItem {
  id: ID
  userId: Float
  courseId: Float
}

input CreateManyWishlistItemsInput {
  """Array of records to create"""
  wishlistItems: [CreateWishlistItem!]!
}

input UpdateOneWishlistItemInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateWishlistItem!
}

input UpdateWishlistItem {
  id: ID
  userId: Float
  courseId: Float
}

input UpdateManyWishlistItemsInput {
  """Filter used to find fields to update"""
  filter: WishlistItemUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateWishlistItem!
}

input WishlistItemUpdateFilter {
  and: [WishlistItemUpdateFilter!]
  or: [WishlistItemUpdateFilter!]
  id: IDFilterComparison
  userId: NumberFieldComparison
  courseId: NumberFieldComparison
}

input DeleteOneWishlistItemInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyWishlistItemsInput {
  """Filter to find records to delete"""
  filter: WishlistItemDeleteFilter!
}

input WishlistItemDeleteFilter {
  and: [WishlistItemDeleteFilter!]
  or: [WishlistItemDeleteFilter!]
  id: IDFilterComparison
  userId: NumberFieldComparison
  courseId: NumberFieldComparison
}

input CreateOneCartItemInput {
  """The record to create"""
  cartItem: CreateCartItem!
}

input CreateCartItem {
  id: ID
  userId: Float
  courseId: Float
}

input CreateManyCartItemsInput {
  """Array of records to create"""
  cartItems: [CreateCartItem!]!
}

input UpdateOneCartItemInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCartItem!
}

input UpdateCartItem {
  id: ID
  userId: Float
  courseId: Float
}

input UpdateManyCartItemsInput {
  """Filter used to find fields to update"""
  filter: CartItemUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCartItem!
}

input CartItemUpdateFilter {
  and: [CartItemUpdateFilter!]
  or: [CartItemUpdateFilter!]
  id: IDFilterComparison
  userId: NumberFieldComparison
  courseId: NumberFieldComparison
}

input DeleteOneCartItemInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyCartItemsInput {
  """Filter to find records to delete"""
  filter: CartItemDeleteFilter!
}

input CartItemDeleteFilter {
  and: [CartItemDeleteFilter!]
  or: [CartItemDeleteFilter!]
  id: IDFilterComparison
  userId: NumberFieldComparison
  courseId: NumberFieldComparison
}

input AddAttendancesToEnrollmentInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetAttendancesOnEnrollmentInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveAttendancesFromEnrollmentInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input CreateOneEnrollmentInput {
  """The record to create"""
  enrollment: CreateEnrollment!
}

input CreateEnrollment {
  id: ID
  passed: Boolean
  studentId: Float
  courseId: Float
  createdAt: DateTime
  updatedAt: DateTime
}

input CreateManyEnrollmentsInput {
  """Array of records to create"""
  enrollments: [CreateEnrollment!]!
}

input UpdateOneEnrollmentInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateEnrollment!
}

input UpdateEnrollment {
  id: ID
  passed: Boolean
  studentId: Float
  courseId: Float
  createdAt: DateTime
  updatedAt: DateTime
}

input UpdateManyEnrollmentsInput {
  """Filter used to find fields to update"""
  filter: EnrollmentUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateEnrollment!
}

input EnrollmentUpdateFilter {
  and: [EnrollmentUpdateFilter!]
  or: [EnrollmentUpdateFilter!]
  id: IDFilterComparison
  passed: BooleanFieldComparison
  studentId: NumberFieldComparison
  courseId: NumberFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
}

input DeleteOneEnrollmentInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyEnrollmentsInput {
  """Filter to find records to delete"""
  filter: EnrollmentDeleteFilter!
}

input EnrollmentDeleteFilter {
  and: [EnrollmentDeleteFilter!]
  or: [EnrollmentDeleteFilter!]
  id: IDFilterComparison
  passed: BooleanFieldComparison
  studentId: NumberFieldComparison
  courseId: NumberFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
}

input AddSubCategoriesToCategoryInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetSubCategoriesOnCategoryInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveSubCategoriesFromCategoryInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input CreateOneCategoryInput {
  """The record to create"""
  category: CreateCategory!
}

input CreateCategory {
  id: ID
  name: String
  headline: String
  image: String
}

input CreateManyCategoriesInput {
  """Array of records to create"""
  categories: [CreateCategory!]!
}

input UpdateOneCategoryInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCategory!
}

input UpdateCategory {
  id: ID
  name: String
  headline: String
  image: String
}

input UpdateManyCategoriesInput {
  """Filter used to find fields to update"""
  filter: CategoryUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCategory!
}

input CategoryUpdateFilter {
  and: [CategoryUpdateFilter!]
  or: [CategoryUpdateFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
}

input DeleteOneCategoryInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyCategoriesInput {
  """Filter to find records to delete"""
  filter: CategoryDeleteFilter!
}

input CategoryDeleteFilter {
  and: [CategoryDeleteFilter!]
  or: [CategoryDeleteFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
}

input SetParentOnSubCategoryInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input AddCoursesToSubCategoryInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetCoursesOnSubCategoryInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveCoursesFromSubCategoryInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input CreateOneSubCategoryInput {
  """The record to create"""
  subCategory: CreateSubCategory!
}

input CreateSubCategory {
  id: ID
  title: String
  headline: String
  parentId: Float
}

input CreateManySubCategoriesInput {
  """Array of records to create"""
  subCategories: [CreateSubCategory!]!
}

input UpdateOneSubCategoryInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateSubCategory!
}

input UpdateSubCategory {
  id: ID
  title: String
  headline: String
  parentId: Float
}

input UpdateManySubCategoriesInput {
  """Filter used to find fields to update"""
  filter: SubCategoryUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateSubCategory!
}

input SubCategoryUpdateFilter {
  and: [SubCategoryUpdateFilter!]
  or: [SubCategoryUpdateFilter!]
  id: IDFilterComparison
  title: StringFieldComparison
  parentId: NumberFieldComparison
}

input DeleteOneSubCategoryInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManySubCategoriesInput {
  """Filter to find records to delete"""
  filter: SubCategoryDeleteFilter!
}

input SubCategoryDeleteFilter {
  and: [SubCategoryDeleteFilter!]
  or: [SubCategoryDeleteFilter!]
  id: IDFilterComparison
  title: StringFieldComparison
  parentId: NumberFieldComparison
}

input SetSubCategoryOnCourseInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input AddSectionsToCourseInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetSectionsOnCourseInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveSectionsFromCourseInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input CreateOneCourseInput {
  """The record to create"""
  course: CreateCourse!
}

input CreateCourse {
  id: ID
  type: CourseType
  title: String
  headline: String
  description: String
  image: String
  introVideo: String
  startingDate: DateTime
  endingDate: DateTime
  price: Float
  teacherId: Float
  subCategoryId: Float
  createdAt: DateTime
  updatedAt: DateTime
}

input CreateManyCoursesInput {
  """Array of records to create"""
  courses: [CreateCourse!]!
}

input UpdateOneCourseInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCourse!
}

input UpdateCourse {
  id: ID
  type: CourseType
  title: String
  headline: String
  description: String
  image: String
  introVideo: String
  startingDate: DateTime
  endingDate: DateTime
  price: Float
  teacherId: Float
  subCategoryId: Float
  createdAt: DateTime
  updatedAt: DateTime
}

input UpdateManyCoursesInput {
  """Filter used to find fields to update"""
  filter: CourseUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCourse!
}

input CourseUpdateFilter {
  and: [CourseUpdateFilter!]
  or: [CourseUpdateFilter!]
  id: IDFilterComparison
  type: CourseTypeFilterComparison
  title: StringFieldComparison
  startingDate: DateFieldComparison
  endingDate: DateFieldComparison
  price: NumberFieldComparison
  teacherId: NumberFieldComparison
  subCategoryId: NumberFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
}

input DeleteOneCourseInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyCoursesInput {
  """Filter to find records to delete"""
  filter: CourseDeleteFilter!
}

input CourseDeleteFilter {
  and: [CourseDeleteFilter!]
  or: [CourseDeleteFilter!]
  id: IDFilterComparison
  type: CourseTypeFilterComparison
  title: StringFieldComparison
  startingDate: DateFieldComparison
  endingDate: DateFieldComparison
  price: NumberFieldComparison
  teacherId: NumberFieldComparison
  subCategoryId: NumberFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
}

input AddLecturesToSectionInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetLecturesOnSectionInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input AddQuizzesToSectionInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetQuizzesOnSectionInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveLecturesFromSectionInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveQuizzesFromSectionInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input CreateOneSectionInput {
  """The record to create"""
  section: CreateSection!
}

input CreateSection {
  id: ID
  order: Float
  title: String
  headline: String
  courseId: Float
}

input CreateManySectionsInput {
  """Array of records to create"""
  sections: [CreateSection!]!
}

input UpdateOneSectionInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateSection!
}

input UpdateSection {
  id: ID
  order: Float
  title: String
  headline: String
  courseId: Float
}

input UpdateManySectionsInput {
  """Filter used to find fields to update"""
  filter: SectionUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateSection!
}

input SectionUpdateFilter {
  and: [SectionUpdateFilter!]
  or: [SectionUpdateFilter!]
  id: IDFilterComparison
  courseId: NumberFieldComparison
}

input DeleteOneSectionInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManySectionsInput {
  """Filter to find records to delete"""
  filter: SectionDeleteFilter!
}

input SectionDeleteFilter {
  and: [SectionDeleteFilter!]
  or: [SectionDeleteFilter!]
  id: IDFilterComparison
  courseId: NumberFieldComparison
}

input SetSectionOnQuizInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input AddQuestionsToQuizInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetQuestionsOnQuizInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input AddAttendancesToQuizInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetAttendancesOnQuizInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveQuestionsFromQuizInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveAttendancesFromQuizInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input CreateOneQuizInput {
  """The record to create"""
  quiz: CreateQuiz!
}

input CreateQuiz {
  title: String
  startingDate: DateTime
  endingDate: DateTime
  article: String
  isLocked: Boolean
  minScoreToPass: Float
  sectionId: Float
  createdAt: DateTime
  updatedAt: DateTime
}

input CreateManyQuizzesInput {
  """Array of records to create"""
  quizzes: [CreateQuiz!]!
}

input UpdateOneQuizInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateQuiz!
}

input UpdateQuiz {
  title: String
  startingDate: DateTime
  endingDate: DateTime
  article: String
  isLocked: Boolean
  minScoreToPass: Float
  sectionId: Float
  createdAt: DateTime
  updatedAt: DateTime
}

input UpdateManyQuizzesInput {
  """Filter used to find fields to update"""
  filter: QuizUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateQuiz!
}

input QuizUpdateFilter {
  and: [QuizUpdateFilter!]
  or: [QuizUpdateFilter!]
  title: StringFieldComparison
  startingDate: DateFieldComparison
  endingDate: DateFieldComparison
  isLocked: BooleanFieldComparison
  sectionId: NumberFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
}

input DeleteOneQuizInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyQuizzesInput {
  """Filter to find records to delete"""
  filter: QuizDeleteFilter!
}

input QuizDeleteFilter {
  and: [QuizDeleteFilter!]
  or: [QuizDeleteFilter!]
  title: StringFieldComparison
  startingDate: DateFieldComparison
  endingDate: DateFieldComparison
  isLocked: BooleanFieldComparison
  sectionId: NumberFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
}

input SetQuizOnQuestionInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input AddOptionsToQuestionInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetOptionsOnQuestionInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveOptionsFromQuestionInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input CreateOneQuestionInput {
  """The record to create"""
  question: CreateQuestion!
}

input CreateQuestion {
  statement: String
  hint: String
  points: Float
  quizId: Float
}

input CreateManyQuestionsInput {
  """Array of records to create"""
  questions: [CreateQuestion!]!
}

input UpdateOneQuestionInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateQuestion!
}

input UpdateQuestion {
  statement: String
  hint: String
  points: Float
  quizId: Float
}

input UpdateManyQuestionsInput {
  """Filter used to find fields to update"""
  filter: QuestionUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateQuestion!
}

input QuestionUpdateFilter {
  and: [QuestionUpdateFilter!]
  or: [QuestionUpdateFilter!]
  quizId: NumberFieldComparison
}

input DeleteOneQuestionInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyQuestionsInput {
  """Filter to find records to delete"""
  filter: QuestionDeleteFilter!
}

input QuestionDeleteFilter {
  and: [QuestionDeleteFilter!]
  or: [QuestionDeleteFilter!]
  quizId: NumberFieldComparison
}

input SetQuestionOnOptionInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input CreateOneOptionInput {
  """The record to create"""
  option: CreateOption!
}

input CreateOption {
  statement: String
  isCorrect: Boolean
  questionId: Float
}

input CreateManyOptionsInput {
  """Array of records to create"""
  options: [CreateOption!]!
}

input UpdateOneOptionInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateOption!
}

input UpdateOption {
  statement: String
  isCorrect: Boolean
  questionId: Float
}

input UpdateManyOptionsInput {
  """Filter used to find fields to update"""
  filter: OptionUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateOption!
}

input OptionUpdateFilter {
  and: [OptionUpdateFilter!]
  or: [OptionUpdateFilter!]
  isCorrect: BooleanFieldComparison
  questionId: NumberFieldComparison
}

input DeleteOneOptionInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyOptionsInput {
  """Filter to find records to delete"""
  filter: OptionDeleteFilter!
}

input OptionDeleteFilter {
  and: [OptionDeleteFilter!]
  or: [OptionDeleteFilter!]
  isCorrect: BooleanFieldComparison
  questionId: NumberFieldComparison
}

input SetSectionOnLectureInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input AddAttendancesToLectureInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetAttendancesOnLectureInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveAttendancesFromLectureInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input CreateOneLectureInput {
  """The record to create"""
  lecture: CreateLecture!
}

input CreateLecture {
  id: ID
  type: LectureType
  title: String
  startingDate: DateTime
  endingDate: DateTime
  article: String
  isLocked: Boolean
  streamLink: String
  videoLink: String
  conferenceId: String
  sectionId: Float
  createdAt: DateTime
  updatedAt: DateTime
}

input CreateManyLecturesInput {
  """Array of records to create"""
  lectures: [CreateLecture!]!
}

input UpdateOneLectureInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateLecture!
}

input UpdateLecture {
  id: ID
  type: LectureType
  title: String
  startingDate: DateTime
  endingDate: DateTime
  article: String
  isLocked: Boolean
  streamLink: String
  videoLink: String
  conferenceId: String
  sectionId: Float
  createdAt: DateTime
  updatedAt: DateTime
}

input UpdateManyLecturesInput {
  """Filter used to find fields to update"""
  filter: LectureUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateLecture!
}

input LectureUpdateFilter {
  and: [LectureUpdateFilter!]
  or: [LectureUpdateFilter!]
  id: IDFilterComparison
  type: LectureTypeFilterComparison
  title: StringFieldComparison
  startingDate: DateFieldComparison
  endingDate: DateFieldComparison
  isLocked: BooleanFieldComparison
  sectionId: NumberFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
}

input DeleteOneLectureInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyLecturesInput {
  """Filter to find records to delete"""
  filter: LectureDeleteFilter!
}

input LectureDeleteFilter {
  and: [LectureDeleteFilter!]
  or: [LectureDeleteFilter!]
  id: IDFilterComparison
  type: LectureTypeFilterComparison
  title: StringFieldComparison
  startingDate: DateFieldComparison
  endingDate: DateFieldComparison
  isLocked: BooleanFieldComparison
  sectionId: NumberFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
}

input CreateOneAnswerInput {
  """The record to create"""
  answer: CreateAnswer!
}

input CreateAnswer {
  id: ID
  studentId: Float
  questionId: Float
  choosedOptionEntityId: Float
  attendanceId: Float
  answer: String
}

input CreateManyAnswersInput {
  """Array of records to create"""
  answers: [CreateAnswer!]!
}

input UpdateOneAnswerInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateAnswer!
}

input UpdateAnswer {
  id: ID
  studentId: Float
  questionId: Float
  choosedOptionEntityId: Float
  attendanceId: Float
  answer: String
}

input UpdateManyAnswersInput {
  """Filter used to find fields to update"""
  filter: AnswerUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateAnswer!
}

input AnswerUpdateFilter {
  and: [AnswerUpdateFilter!]
  or: [AnswerUpdateFilter!]
  id: IDFilterComparison
  studentId: NumberFieldComparison
  choosedOptionEntityId: NumberFieldComparison
  attendanceId: NumberFieldComparison
}

input DeleteOneAnswerInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyAnswersInput {
  """Filter to find records to delete"""
  filter: AnswerDeleteFilter!
}

input AnswerDeleteFilter {
  and: [AnswerDeleteFilter!]
  or: [AnswerDeleteFilter!]
  id: IDFilterComparison
  studentId: NumberFieldComparison
  choosedOptionEntityId: NumberFieldComparison
  attendanceId: NumberFieldComparison
}

input CreateOneAttendanceInput {
  """The record to create"""
  attendance: CreateAttendance!
}

input CreateAttendance {
  id: ID
  studentId: Float
  lectureId: Float
  enrolledId: Float
  quizId: Float
  createdAt: DateTime
  updatedAt: DateTime
}

input CreateManyAttendancesInput {
  """Array of records to create"""
  attendances: [CreateAttendance!]!
}

input UpdateOneAttendanceInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateAttendance!
}

input UpdateAttendance {
  id: ID
  studentId: Float
  lectureId: Float
  enrolledId: Float
  quizId: Float
  createdAt: DateTime
  updatedAt: DateTime
}

input UpdateManyAttendancesInput {
  """Filter used to find fields to update"""
  filter: AttendanceUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateAttendance!
}

input AttendanceUpdateFilter {
  and: [AttendanceUpdateFilter!]
  or: [AttendanceUpdateFilter!]
  id: IDFilterComparison
  studentId: NumberFieldComparison
  lectureId: NumberFieldComparison
  enrolledId: NumberFieldComparison
  quizId: NumberFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
}

input DeleteOneAttendanceInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyAttendancesInput {
  """Filter to find records to delete"""
  filter: AttendanceDeleteFilter!
}

input AttendanceDeleteFilter {
  and: [AttendanceDeleteFilter!]
  or: [AttendanceDeleteFilter!]
  id: IDFilterComparison
  studentId: NumberFieldComparison
  lectureId: NumberFieldComparison
  enrolledId: NumberFieldComparison
  quizId: NumberFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
}
